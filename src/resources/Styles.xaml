<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Global Resources -->
    <SolidColorBrush x:Key="Button.Static.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Button.MouseOver.Foreground" Color="#FFBB0000"/>
    <SolidColorBrush x:Key="Button.IsChecked.Foreground" Color="#FF440000"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="Transparent" />
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FFB2B2B2"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FFB2B2B2"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FFB2B2B2"/>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- EMD global resources -->

    <!-- Button style for the dark buttons in the header of the application -->
    <Style x:Key="HeaderButton" 
           TargetType="Button" >
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Foreground" Value="#FF9C9C9C" />
        <Setter Property="BorderBrush" Value="#FFC7C7C7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="HeaderBttnBrdr"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                     <ControlTemplate.Triggers>
                         <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HeaderBttnBrdr" Property="Background" Value="#FF000000" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True" >
                            <Setter TargetName="HeaderBttnBrdr" Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="HeaderBttnBrdr" Property="Background" Value="#FFC7C7C7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>                
            </Setter.Value>   
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#FFFFFFFF" />
                <Setter Property="BorderBrush" Value="#FFFFFFFF" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="#FFFFFFFF" />
                <Setter Property="BorderBrush" Value="#FFFFFFFF" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="#FF141414"/>
                <Setter Property="Foreground" Value="#FF141414" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- END header button style -->


    <!-- Button style for the manual "add" as well as any other menu buttons that may get added in the future  -->
    <Style x:Key="HeaderCntrlBttn" 
           TargetType="Button" >
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Foreground" Value="#FFF0A30A" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="HeaderBttnBrdr"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" >
                            <Setter TargetName="HeaderBttnBrdr" Property="Background" Value="Transparent" />
                            <Setter TargetName="HeaderBttnBrdr" Property="BorderBrush" Value="#FFF0A30A" />
                            <Setter TargetName="HeaderBttnBrdr" Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="HeaderBttnBrdr" Property="Background" Value="#FFC7C7C7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#FFFFFFFF" />
                <Setter Property="BorderBrush" Value="#FFFFFFFF" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="#FFFFFFFF" />
                <Setter Property="BorderBrush" Value="#FFFFFFFF" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="#FF141414"/>
                <Setter Property="Foreground" Value="#FF141414" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- END manual add button style -->


    <!-- Button style for main menu buttons on left sidebar -->
    <Style x:Key="MenuBttn"
           TargetType="Button" >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="Foreground" Value="#FFB9A6BF" />
        <Setter Property="Width" Value="260px" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="MainMenuBttnBrdr"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush>
                            <GradientStop Color="#002F1F36" Offset="1"/>
                            <GradientStop Color="#FF2F1F36" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="1,0,0,0" />
                <Setter Property="BorderBrush" Value="#FF2B1C30" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="#FF2F1F36" />
                <Setter Property="Foreground" Value="#FFF8E4FF" />
                <Setter Property="BorderThickness" Value="1,0,0,0" />
                <Setter Property="BorderBrush" Value="#FF2B1C30" />
            </Trigger>
        </Style.Triggers>        
    </Style>
    <!-- END sidebar menu button style -->
    
    <!-- Button style for star rating -->
    <Style x:Key="StarRatingBttn"
           TargetType="ToggleButton" >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="BorderBrush" Value="#FF004C99" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Canvas x:Name="StarBttn" >
                        <Path Data="M 0 7.1 H 7.66 L 10 0.13 12.34 7.1 H 20 l -6.11 4.66 2.43 7.37 L 10 14.57 3.68 19.13 6.11 11.76 Z"
                              Fill="{TemplateBinding Background}"
                              Stroke="{TemplateBinding BorderBrush}"
                              StrokeThickness="1"
                              StrokeMiterLimit="10"
                              Canvas.Top="5"
                              Canvas.Left="5"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFFFFF00" />
                <Setter Property="BorderBrush" Value="#FF999900" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#FF3399FF" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- END star rating button style -->

    <!-- Button style for clear button as used in removing star ratings -->
    <Style x:Key="ClearButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="clearBttnBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="clearBttnBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="#FFBB0000"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Foreground" Value="#FF440000"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="clearBttnBorder" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- END clear button style -->

    <!-- Button style for the Ascending/Descending Filter for lists of results -->
    <Style x:Key="ListAscenderFilter" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="#FFDDDDDD"/>
        <Setter Property="BorderBrush" Value="#FFB2B2B2"/>
        <Setter Property="Foreground" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,1,1,1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"  Width ="25px" Height ="25px" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <Canvas>
                            <Path Data="M 1 11 L 11 11 L 6 1 Z"
                                                  Fill="#FF3B3B3B" 
                                                  Stroke="#FF3B3B3B"
                                                  StrokeThickness="1"  
                                                  StrokeMiterLimit="0"
                                                  Canvas.Top="5"
                                                  Canvas.Left="6"/>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FF999999"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                            <Setter Property="RenderTransform" >
                                  <Setter.Value>                                    
                                    <ScaleTransform ScaleY="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- END Ascending/Descending button style -->

    <!-- List "Sort By" Button style -->
    <Style x:Key="ListSortByBttn" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="#FFDDDDDD"/>
        <Setter Property="BorderBrush" Value="#FFB2B2B2"/>
        <Setter Property="Foreground" Value="#FF3B3B3B"/>
        <Setter Property="BorderThickness" Value="0,1,0,1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontFamily" Value="SegoeUI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FF999999"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFDDDDDD" Offset="0.2"/>
                                        <GradientStop Color="White" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- END List Sort By Button style -->

    <!-- Header for Current View List -->
    <Style x:Key="ListDataGridStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource ListColumnHeader}" />
    </Style>
    <Style x:Key="ListColumnHeader" TargetType="DataGridColumnHeader">
        <Setter Property="Height" Value="25px" />
        <Setter Property="Padding" Value="0,0.000001,0,0" />
    </Style>
    <!-- END Current View Header -->
</ResourceDictionary>